#####app.conf#####dev.mode=true

server.context=ws
server.port=8989

service.pkg=service
vo.pkg=src/vo
~~~~~~~~~~~~~~~~~~~~
#####src\internel_pithy_gen\init_res.go#####package internel_pithy_gen

import (
    "changlie/pithy"
    "fmt"
)

func init() {
    pithy.SetSRC("/addUser.html", `
<html>
<head><title>add user</title></head>
<body>
<h1> add user </h1>
</body>
</html>
`)

fmt.Println("set static rescources.")
}
~~~~~~~~~~~~~~~~~~~~
#####src\ptdemo\main.go#####package main

import (
	_ "internel_pithy_gen"
)
import (
	pt "changlie/pithy"
	"changlie/pithy/common"
	ptpkg "changlie/pithy/pkg"
	"fmt"
	"os"
)

func gen() {
	ptpkg.GenerateInitHandlerFile()
	ptpkg.InsertJsonTag4Struct()
}

func gen4pkg() {
	gen()
	ptpkg.GenConfigInitFile()
	ptpkg.GenStaticResInitFile()
}

func serverStartup() {
	pt.Start()
}

func main() {
	if !common.GetConfigBool("dev.mode") {
		serverStartup()
		return
	}
	if len(os.Args) < 2 {
		return
	}

	action := os.Args[1]
	fmt.Println("action:", action)
	switch action {
	case "gen":
		fmt.Println("generate source file")
		gen()

	case "run":
		fmt.Println("start up server!")
		serverStartup()
	}
}





~~~~~~~~~~~~~~~~~~~~
#####src\ptdemo\main_test.go#####package main

import (
    "changlie/pithy/common"
    "changlie/pithy/pkg"
    "encoding/base64"
    _ "internel_pithy_gen"
    "mime"
    "path/filepath"
    "reflect"
    "strings"
    "vo"
)
import (
    "encoding/json"
    "fmt"
    "testing"
)

func Test_path(t *testing.T) {
    ext := filepath.Ext("/static/bptree.html")
    fmt.Println(ext)
    extension := mime.TypeByExtension(ext)
    fmt.Println(extension)
}

func Test_arr1(t *testing.T) {
    arr := []int{1,9,0,23}
    modifyArr(&arr)
    fmt.Println(arr)
}

func modifyArr(arr *[]int) {
    *arr = append(*arr, 11, 19, 10, 123, 22, 33, 44, 55)
}

func Test_base64(t *testing.T) {
    msg := "Hello, 世界"
    encoded := base64.StdEncoding.EncodeToString([]byte(msg))
    fmt.Println(encoded)
    decoded, err := base64.StdEncoding.DecodeString(encoded)
    if err != nil {
        fmt.Println("decode error:", err)
        return
    }
    fmt.Println(string(decoded))
}

func Test_json1(t *testing.T) {
    p := &vo.Phone{
        Name:       "tcl",
        Cpu:        "intel",
        Arm:        "4G",
        ScreenType: "lcd",
        ScreenSize: "5.5",
    }
    bs, _ := json.Marshal(p)
    fmt.Println(string(bs))
}

func Test_str(t *testing.T) {
    s := "Hello"
    fmt.Println(s[:1])
    fmt.Println(strings.ToLower(s[:1])+s[1:])
    fmt.Println(reflect.TypeOf(s[:0]))
}


func Test_AddJsonTag(t *testing.T) {
    common.LoadConfig()
    pkg.InsertJsonTag4Struct()
    fmt.Println("v2")
}


func Test_arr(t *testing.T) {
    arr := []int{1,99,0,1}
    clearArr(&arr)
    fmt.Println(arr)
}

func clearArr(arr *[]int) {
    tmp := *arr
    fmt.Println("in sub func out:", tmp)
    tmp = nil
    //*arr = nil
}


func Test_lenFunc(t *testing.T) {
    var arr  []int
    fmt.Println(arr == nil)
    fmt.Println(len(arr))
}


func Test_json(t *testing.T) {
    m1 := map[string]interface{}{
       "id": 10010,
       "name": "IT DEP",
       "duty": "coding",
       "is old": false,
    }
    m2 := map[string]string{
        "id":"10086",
        "a":"aaaaaaaa",
        "b":"ccccccc",
    }
    bs, err := json.Marshal(m1)
    fmt.Println(string(bs), err)

    testSwitch(m1)
    testSwitch(m2)
}

func testSwitch(a interface{}) {
    switch v := a.(type) {
    case map[string]interface{}:
        fmt.Printf("%v is map type.\n", v)
    default:
        fmt.Printf("v is unknown type: %v\n", v)
    }
}

~~~~~~~~~~~~~~~~~~~~
#####src\service\employee_service.go#####package service

import (
	pt "changlie/pithy"
	"fmt"
	"vo"
)
// `rootpath#employee`
// `get#list`
func EmployeeList(r pt.Req) {
	fmt.Println("over### EmployeeList")
	e := &vo.Employee{
		Name: "zxx",
		Num:  "d-9527",
	}
	r.RespJson(e)
}

// `post#create`
func EmployeeCreate(r pt.Req) {
	fmt.Println("over### EmployeeCreate")
	r.RespJson("service#EmployeeCreate222222222")
}


~~~~~~~~~~~~~~~~~~~~
#####src\service\interface\service_interface.go#####package _interface

import (
	pt "changlie/pithy"
	s "service"
)

type UserService interface {
	Users(r pt.Req)
	UserAdd(r pt.Req)
	UserUpdate(r pt.Req)
	UserDel(r pt.Req)
}

var userServiceImpl s.UserServiceImpl
func NewUserService() UserService {
	return &userServiceImpl
}
~~~~~~~~~~~~~~~~~~~~
#####src\service\role_service.go#####package service

import pt "changlie/pithy"

type RoleServiceImpl struct {}


func (role *RoleServiceImpl) RoleList(r pt.Req) {
    r.RespJson("it's role list.")
}

func  CreateRole(r pt.Req) {
    r.RespJson("create role successfully.")
}


func (role *RoleServiceImpl) RoleDelete(r pt.Req) {
    r.RespJson("delete role finish!")
}~~~~~~~~~~~~~~~~~~~~
#####src\service\user_service.go#####package service

import (
	pt "changlie/pithy"
	"fmt"
	"vo"
)

type UserServiceImpl struct{}

func (u *UserServiceImpl) Users(r pt.Req) {
	user := &vo.User{
		Id:   991,
		Name: "police",
		Age:  211,
	}
	r.RespJson(user)
}

func (u *UserServiceImpl) UserAdd(r pt.Req) {
	fmt.Println("create user successfully!")
	r.RespJson("UserServiceImpl#UserAdd1111")
}

func (u *UserServiceImpl) UserUpdate(r pt.Req) {
	r.RespJson("UserServiceImpl#UserUpdate")
}

func (u *UserServiceImpl) UserDel(r pt.Req) {
	r.RespJson("UserServiceImpl#UserDel")
}



~~~~~~~~~~~~~~~~~~~~
#####src\vo\purchase.go#####package vo


type Shop struct {
    Name string `json:"name"` //shopnameinregister
    num int `json:"num"` //uniquenumber.
}


type Phone struct {
    Name string`json:"phone_name"`
    Cpu string `json:"cpu"` 
    Arm string `json:"arm"` 
    ScreenType string `json:"screenType"` 
    ScreenSize string `json:"screenSize"` 
}
~~~~~~~~~~~~~~~~~~~~
#####src\vo\to_json_str_func_gen.go#####package vo

import (
    "bytes"
    "fmt"
)

func (u *User) JsonString() string {
    var buf bytes.Buffer
    buf.WriteString("{")
    buf.WriteString(fmt.Sprintf(`"age":%v,`, u.Age))
    buf.WriteString(fmt.Sprintf(`"name":"%v",`, u.Name))
    buf.WriteString(fmt.Sprintf(`"id":%v`, u.Id))
    buf.WriteString("}")
    return buf.String()
}
~~~~~~~~~~~~~~~~~~~~
#####src\vo\user.go#####package vo

type User struct // user bean
{ // line feed


    Id int `json:"id"` 
    Name string `json:"name"` 
    Age int `json:"age"` 
}

type Employee struct {
    Name string `json:"name"` //employeename
    Num string `json:"num"` //employeenumber
}

type Depart struct {
    Name string `json:"name"`      // 部门名称
    Num int `json:"num"`   // 编号
    Duty string `json:"duty"`  // 职责
}
~~~~~~~~~~~~~~~~~~~~
#####start#####
export GOPATH=`pwd`:/d/software/golangLocalRepo

go run src/ptdemo/main.go gen

go run src/ptdemo/main.go run~~~~~~~~~~~~~~~~~~~~
